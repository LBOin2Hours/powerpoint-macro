Sub convert_ppt_to_txt()

    Dim p As Presentation
    Set p = Presentations.Open("C:\Users\Aaron\Desktop\ppt-test\ppt-to-convert.pptx")
    ' Set p = PowerPointApp.Presentations.Open("C:\Users\Aaron\Desktop\ppt-to-convert.pptx")
    Call ungroup_shapes(p)
    
    Dim next_string_to_append As String
    
    Dim all_text_output As String
    Dim number_only_output As String
    all_text_output = "C:\Users\Aaron\Desktop\ppt-test\Examine_2_All_Text.txt"
    number_only_output = "C:\Users\Aaron\Desktop\ppt-test\Examine_1_Numbers.txt"
    
    ' cannot set p as active presentation otherwise it's going to impact other opened ppt files
    
    Dim s As Slide
    Dim sh As Shape
    
    For Each s In p.Slides
    
        Call WriteStringToFile(all_text_output, "        ")
        
        For Each sh In s.Shapes
            If sh.HasTextFrame Then
                If sh.TextFrame.HasText Then
                
                    next_string_to_append = sh.TextFrame.TextRange.Text
                    Call WriteStringToFile(all_text_output, next_string_to_append)
                    
                    'Call WriteStringToFile(number_only_output, "        ")
                    Call containsNumber(next_string_to_append, number_only_output)
                    'Call WriteStringToFile(number_only_output, "        ")

                End If
            End If
        Next
        
        Call WriteStringToFile(all_text_output, "        ")
        
    Next
    
    Call SendFileToNotePad(all_text_output)
    Call SendFileToNotePad(number_only_output)
    
End Sub

Function containsNumber(inputString As String, number_output_file As String) As Boolean

    Dim counter As Integer
    Dim hasNumber As Boolean
    Dim extracting_switch As Boolean
    Dim i As Integer
    Dim j As Integer
    
    i = 1
    j = 1
    
    containsNumber = False
    extracting_switch = False
    
    For counter = 1 To Len(inputString)
        
         ' if the char is a digit
        If IsNumeric(Mid(inputString, counter, 1)) Or InStr(Mid(inputString, counter, 1), "%") > 0 Then
            If extracting_switch Then
                j = counter
                If counter = Len(inputString) Then
                    Call WriteStringToFile(number_output_file, Mid(inputString, i, j - i + 1))
                End If
            Else
                extracting_switch = True
                i = counter
                j = counter
            End If
        
        ' if the char is not a digit
        ' ElseIf InStr(Mid(inputString, counter, 1), ["%", "@"]) > 0 Then
        
        
            MsgBox Mid(inputString, counter, 1)
        ElseIf extracting_switch Then
            Call WriteStringToFile(number_output_file, Mid(inputString, i, j - i + 1))
            extracting_switch = False
        Else
        End If
                    
    Next

End Function

Function containsNumber2(inputString As String, number_output_file As String) As Boolean

    Dim counter As Integer
    Dim hasNumber As Boolean
    Dim extracting_switch As Boolean
    Dim i As Integer
    Dim j As Integer
    
    i = 1
    j = 1
    
    containsNumber = False
    extracting_switch = False
    
    For counter = 1 To Len(inputString)
        
        ' if the char is a digit
        If IsNumeric(Mid(inputString, counter, 1)) Then
            extracting_switch = True
            If i = j Then
                i = counter
                j = counter + 1
            Else
                j = counter
            End If
        ' if the char is not a digit
        ElseIf extracting_switch Then
            Call WriteStringToFile(number_output_file, Mid(inputString, i, j - i + 1))
            i = counter
            j = counter
            extracting_switch = False
            
        Else
        End If
        
    Next

End Function


Sub WriteStringToFile(pFileName As String, pString As String)

    Dim intFileNum As Integer
    intFileNum = FreeFile
    Open pFileName For Append As intFileNum
    Print #intFileNum, pString
    Close intFileNum

End Sub

Sub SendFileToNotePad(pFileName As String)
    
    Dim lngReturn As Long
    lngReturn = Shell("NOTEPAD.EXE " & pFileName, vbNormalFocus)

End Sub

Sub ungroup_shapes(p As Presentation)
    
    Dim s As Slide
    Dim sh As Shape
    
    ' How many layers of grouped shapes are there, normally 6 layers would unwrap everything
    
    For Each s In p.Slides
        For x = 1 To 6
            For Each sh In s.Shapes
                If sh.Type = msoGroup Then sh.Ungroup
            Next
        Next x
    Next
    
End Sub


